//------------------------------------------------------------------------------------------------------------
//User Editable Configurable Value
const closeMoveInactiveBoards = true; // If this is set to true then boards that have not been active in the last X days will be closed/archived. If all the boards in a Workpace are closed then those boards will be moved to the Archive workspace.
const deleteEmptyWorkspaces = false; // If this is set to true then workspaces with no boards will be deleted.
const daysSinceLastActive = 365; // If a board has not been in the last X days then the board will be closed/archived. Note that this value only matters if closeInactiveBoards is set to true
const archiveWorkspace = 'Workspace ID'; // If deleteEmptyWorkspaces is set to true then workspaces that only have closed boards will have their boards moved to this workspace and then be deleted
const testRun = true; // If this is set to true then no boards will actually be closed and no workspaces will be closed. 

//------------------------------------------------------------------------------------------------------------
//REQUIRED authintication credentials
//These are the credentials required to authenticate with the the Trello API. 

const apiKey = 'API Key'; //Enter your personal API key
const apiToken = 'API Token'; //Enter your personal API token that was generated by the API key above
const enterpriseId = 'Enterprise ID'; //Enter the ID of the Trello Enterprise you want to add members to.

//------------------------------------------------------------------------------------------------------------
//Below this line is the main execution code. Edits below this line are not recommended unless you are trying to adapt the core funtionality of the script.

const fetch = require('node-fetch');
const moment = require('moment');
const fs = require('fs');
const headers = { 'Accept': 'application/json' };
const timestamp = moment().format("YYYY-MM-DD-HHmmss");

// Function that fetch's API but with a timeout
async function fetchWithTimeout(resource, options) {
  const { timeout = 50000 } = options;
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  const response = await fetch(resource, { ...options, signal: controller.signal });
  clearTimeout(id);
  return response;
}


// Function to actually look through boards and close/archive those that are not active in the last X days. 
async function getAndMoveEnterpriseWorkspaces() {
  // Tells user that script is starting
  if (testRun == true) {console.log("TEST RUN MODE - Starting to analyze your Enterprise Workspaces")};
  console.log("Starting to analyze your Enterprise Workspaces");

  // URL for getting Enterprise's Workspace IDs
  const getEnterpriseWorkspaceIDs = `https://api.trello.com/1/enterprises/${enterpriseId}?key=${apiKey}&token=${apiToken}`;

  // Creates report files
  fs.writeFileSync(`boards_report_${timestamp}.csv`, 'Workspace ID, Board ID, Board Name, Already Closed, Date Last View/Activity, Eligible To Be Closed\r\n');
  fs.writeFileSync(`workspace_report_${timestamp}.csv`, 'Workspace ID, Status\r\n');

  // Call to get Workspace IDs
  const response = await fetchWithTimeout(getEnterpriseWorkspaceIDs, { headers });
  if (!response.ok) throw new Error(`HTTP error - get enterprise workspaces! status: ${response.status}`);
  const body = await response.json();
  const workspaceResponse = body.idOrganizations;

  // Loops through and gets all boards of each Workspace
  for (const organization of workspaceResponse) {
    await getBoardsOfEnterprise(organization);
  }

  // 
  const deletedWorkspaces = [];
  for (const organization of workspaceResponse) {
    const isDeleted = await checkIfWorkspaceEmpty(organization);
    if (isDeleted) {
      deletedWorkspaces.push(organization);
    }
  }

  // Adds Deleted Workspaces in Report
  for (const organization of workspaceResponse) {
    const isDeleted = deletedWorkspaces.includes(organization);
    fs.appendFileSync(`workspace_report_${timestamp}.csv`, [organization, isDeleted ? "Deleted" : "Not Deleted"].join(', ') + '\r\n');
  }
  console.log("All done!")
}

// Function that gets boards of a particular workspaces and closes/archives the ones that are not active in the last X days. 
async function getBoardsOfEnterprise(workspaceId) {
  console.log(`Getting boards belonging to ${workspaceId} to see which to close/archive.`);
  const getAllBoardsOfEnterprise = `https://api.trello.com/1/organizations/${workspaceId}/boards?key=${apiKey}&token=${apiToken}`;
  
  const response = await fetchWithTimeout(getAllBoardsOfEnterprise, { headers });
  if (!response.ok) throw new Error(`HTTP error - get boards of enterprise! status: ${response.status}`);
  
  const boardResponse = await response.json();
  for (const board of boardResponse) {
    const daysSinceActive = moment().diff(moment(board.dateLastActivity), 'days');
    const eligible = ((daysSinceActive > daysSinceLastActive || isNaN(daysSinceActive)) && !board.closed) ? "Yes" : "No";

    if (eligible === "Yes") {
      if (closeMoveInactiveBoards === true){
      const closeBoard = `https://api.trello.com/1/boards/${board.id}?closed=true&key=${apiKey}&token=${apiToken}`;
      if (testRun == false){
      const moveResponse = await fetchWithTimeout(closeBoard, { method: 'PUT',
        headers: headers })
      if (!moveResponse.ok) throw new Error(`HTTP error - close/archive board! status: ${moveResponse.status}`);;}}
      console.log(`Closed/Archived ${board.id} board`);
    }
    
    fs.appendFileSync(`boards_report_${timestamp}.csv`, [workspaceId, board.id, board.name, board.closed, daysSinceActive, board.dateLastActivity, eligible].join(', ') + '\r\n');
  }
  if (closeMoveInactiveBoards === true){
  await moveBoardsOfEnterprise(workspaceId);}
}

// Function that moves closed boards of a particular Workspace 
async function moveBoardsOfEnterprise(workspaceId) {
  console.log(`Getting boards belonging to ${workspaceId} see all boards are closed and if they should be moved to the Archive Workspace`);
  const getOpenBoardsOfEnterprise = `https://api.trello.com/1/organizations/${workspaceId}/boards?filter=open&key=${apiKey}&token=${apiToken}`;
  
  try {
    const openResponse = await fetchWithTimeout(getOpenBoardsOfEnterprise, { headers });
    if (!openResponse.ok) {
      console.error(`HTTP error - get open boards of enterprise! status: ${openResponse.status}`);
      return; // Skip the rest of the function if an HTTP error occurs
    }
    
    const openBoardResponse = await openResponse.json();

    const getAllBoardsOfEnterprise = `https://api.trello.com/1/organizations/${workspaceId}/boards?&key=${apiKey}&token=${apiToken}`;
    const response = await fetchWithTimeout(getAllBoardsOfEnterprise, { headers });

    if (!response.ok) {
      console.error(`HTTP error - get boards of enterprise! status: ${response.status}`);
      return; // Skip the rest of the function if an HTTP error occurs
    }
    
    const boardResponse = await response.json();
    
    if (openBoardResponse.length === 0) {
      for (const board of boardResponse) {
        const moveBoard = `https://api.trello.com/1/boards/${board.id}?idOrganization=${archiveWorkspace}&key=${apiKey}&token=${apiToken}`;
        if (testRun === false && (workspaceId !== '5f468a6af0cf010cb30f748c' || workspaceId !== '5f490dc45da1077aee4488a6')) {
          try {
            const moveResponse = await fetchWithTimeout(moveBoard, { method: 'PUT', headers: headers });
            if (!moveResponse.ok) {
              console.error(`HTTP error - move board! status: ${moveResponse.status}`);
              continue; // Skip to the next iteration if an HTTP error occurs
            }
            console.log(`Moved ${board.id} board`);
          } catch (error) {
            console.error(`An error occurred during board move: ${error}`);
            continue; // Skip to the next iteration on error
          }
        } else {
          console.log(`Test run: Moved ${board.id} board`);
        }
      }
    }
  } catch (error) {
    console.error(`An error occurred during board retrieval: ${error}`);
  }
}


// Function to check if a Workspace is empty (has no boards) and delete it if it is empty
async function checkIfWorkspaceEmpty(workspaceId) {
  if (deleteEmptyWorkspaces === true) {
  console.log(`Checking if ${workspaceId} is empty`);
  const getOpenBoardsOfWorkspace = `https://api.trello.com/1/organizations/${workspaceId}/boards?filter=all&key=${apiKey}&token=${apiToken}`;
  
  const response = await fetchWithTimeout(getOpenBoardsOfWorkspace, { headers });
  if (!response.ok) throw new Error(`HTTP error - get open boards of workspace! status: ${response.status}`);
  
  const boardResponse = await response.json();
  const deleteWorkspace = `https://api.trello.com/1/organizations/${workspaceId}?key=${apiKey}&token=${apiToken}`;
  if (boardResponse.length === 0 && workspaceId != archiveWorkspace && deleteEmptyWorkspaces === true ) {
    if (testRun === false){
    const deleteResponse = await fetchWithTimeout(deleteWorkspace, { 
      method: 'Delete',
      headers: headers });
    if (!deleteResponse.ok) throw new Error(`HTTP error - deleting board! status: ${deleteResponse.status}`);};
    console.log(`${workspaceId} has been deleted.`);
    return true;  // Workspace was deleted (if not in Test Mode)
  }
  return false;  // Workspace was not deleted.
}}

// Runs script 1 time at start
getAndMoveEnterpriseWorkspaces();

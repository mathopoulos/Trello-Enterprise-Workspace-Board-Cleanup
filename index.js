//------------------------------------------------------------------------------------------------------------
//User Editable Configurable Value
const daysSinceLastActive = 365;
const archiveWorkspace = 'Enter id of archive workspace';

//------------------------------------------------------------------------------------------------------------
//REQUIRED authintication credentials
//These are the credentials required to authenticate with the the Trello API. 

const apiKey = 'API Key'; //Enter your personal API key
const apiToken = 'API Token'; //Enter your personal API token that was generated by the API key above
const enterpriseId = 'Enterprise ID'; //Enter the ID of the Trello Enterprise you want to add members to.

//------------------------------------------------------------------------------------------------------------
//Below this line is the main execution code. Edits below this line are not recommended unless you are trying to adapt the core funtionality of the script.


const fetch = require('node-fetch');
const moment = require('moment');
const fs = require('fs');
const headers = { 'Accept': 'application/json' };
const timestamp = moment().format("YYYY-MM-DD-HHmmss");


async function fetchWithTimeout(resource, options) {
  const { timeout = 50000 } = options;
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  const response = await fetch(resource, { ...options, signal: controller.signal });
  clearTimeout(id);
  return response;
}

async function getAndMoveEnterpriseWorkspaces() {
  console.log("Starting to analyze your Enterprise Workspaces");
  const getEnterpriseWorkspaceIDs = `https://api.trello.com/1/enterprises/${enterpriseId}?key=${apiKey}&token=${apiToken}`;

  fs.writeFileSync(`boards_report_${timestamp}.csv`, 'Workspace ID, Board ID, Board Name, Date Last View/Activity, Eligible For Archive\r\n');
  fs.writeFileSync(`workspace_report_${timestamp}.csv`, 'Workspace ID, Workspace Name, Member Count, Status\r\n');

  const response = await fetchWithTimeout(getEnterpriseWorkspaceIDs, { headers });
  if (!response.ok) throw new Error(`HTTP error - get enterprise workspaces! status: ${response.status}`);
  
  const body = await response.json();
  const workspaceResponse = body.idOrganizations;

  for (const organization of workspaceResponse) {
    await getBoardsOfEnterprise(organization);
  }

  const deletedWorkspaces = [];
  for (const organization of workspaceResponse) {
    const isDeleted = await checkIfWorkspaceEmpty(organization);
    if (isDeleted) {
      deletedWorkspaces.push(organization);
    }
  }

  for (const organization of workspaceResponse) {
    const isDeleted = deletedWorkspaces.includes(organization);
    fs.appendFileSync(`workspace_report_${timestamp}.csv`, [organization, , , isDeleted ? "Deleted" : "Not Deleted"].join(', ') + '\r\n');
  }
}

async function getBoardsOfEnterprise(workspaceId) {
  console.log(`Getting boards belonging to ${workspaceId}`);
  const getAllBoardsOfEnterprise = `https://api.trello.com/1/organizations/${workspaceId}/boards?key=${apiKey}&token=${apiToken}`;
  
  const response = await fetchWithTimeout(getAllBoardsOfEnterprise, { headers });
  if (!response.ok) throw new Error(`HTTP error - get boards of enterprise! status: ${response.status}`);
  
  const boardResponse = await response.json();
  for (const board of boardResponse) {
    const daysSinceActive = moment().diff(moment(board.dateLastActivity), 'days');
    const eligible = daysSinceActive > daysSinceLastActive ? "Yes" : "No";

    if (eligible === "Yes") {
      const moveBoard = `https://api.trello.com/1/boards/${board.id}?idOrganization=${archiveWorkspace}&key=${apiKey}&token=${apiToken}`;
      const moveResponse = await fetchWithTimeout(moveBoard, { method: 'PUT',
        headers: headers });
      console.log(`Moved ${board.id} board`);
      if (!moveResponse.ok) throw new Error(`HTTP error - move board! status: ${moveResponse.status}`);
    }
    
    fs.appendFileSync(`boards_report_${timestamp}.csv`, [workspaceId, board.id, board.name, daysSinceActive, board.dateLastActivity, eligible].join(', ') + '\r\n');
  }
  console.log("All done!")
}

async function checkIfWorkspaceEmpty(workspaceId) {
  console.log(`Checking if ${workspaceId} is empty`);
  const getAllBoardsOfWorkspace = `https://api.trello.com/1/organizations/${workspaceId}/boards?key=${apiKey}&token=${apiToken}`;
  
  const response = await fetchWithTimeout(getAllBoardsOfWorkspace, { headers });
  if (!response.ok) throw new Error(`HTTP error - get boards of workspace! status: ${response.status}`);
  
  const boardResponse = await response.json();
  const deleteWorkspace = `https://api.trello.com/1/organizations/${workspaceId}?key=${apiKey}&token=${apiToken}`;
  //console.log(deleteWorkspace)
  if (boardResponse.length === 0) {
    const deleteResponse = await fetchWithTimeout(deleteWorkspace, { 
      method: 'Delete',
      headers: headers });
    //console.log(deleteResponse)
    if (!deleteResponse.ok) throw new Error(`HTTP error - deleting board! status: ${deleteResponse.status}`);
    console.log(`${workspaceId} has been deleted.`);
    return true;  // Workspace was deleted.
  }
  return false;  // Workspace was not deleted.
}

getAndMoveEnterpriseWorkspaces();
